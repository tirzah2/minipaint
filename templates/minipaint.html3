<div class="minipaint-app">
  <iframe id="myFrame" style="width:100%; border:0;" src="modules/minipaint/index.html" allow="camera"></iframe>

  </div>
</div>

<script>
// Function to hide specific elements in the iframe
function hideElementsInIframe() {
  const iframe = document.getElementById('myFrame');
  
  // Check if iframe and its content are accessible
  if (iframe && iframe.contentWindow) {
    const iframeDocument = iframe.contentWindow.document;

    // Use querySelector to find the specific elements by their selectors
    const helpMenuItem = iframeDocument.querySelector('#main_menu_0_7');
    const logoElement = iframeDocument.querySelector('a.logo');

    // Hide the help menu item if found
    if (helpMenuItem) {
      helpMenuItem.style.display = 'none';
    }

    // Hide the logo element if found
    if (logoElement) {
      logoElement.style.display = 'none';
    }
  }
}

// Attach an event listener to the iframe to run the function once it's loaded
document.getElementById('myFrame').addEventListener('load', hideElementsInIframe);

// Function to inject the Load Tile and Replace Tile menu items into the menu bar
function injectMenuItems() {
  const iframe = document.getElementById('myFrame');

  // Check if iframe and its content are accessible
  if (iframe && iframe.contentWindow) {
    const iframeDocument = iframe.contentWindow.document;

    // Find the menu bar element
    const menuBar = iframeDocument.querySelector('.menu_bar');

    if (menuBar) {
      // Create the Load Tile and Load Token menu items
      const loadTileMenuItem = iframeDocument.createElement('li');
      loadTileMenuItem.innerHTML = `
        <a id="main_menu_x" role="menuitem" tabindex="-1" aria-haspopup="false" aria-expanded="false" href="javascript:void(0)" data-level="0" onclick="window.parent.loadTile()" title="Load the selected tile into miniPaint">
          <i class="fas fa-vector-square"></i> Tile
        </a>
      `;
      const loadTokenMenuItem = iframeDocument.createElement('li');
      loadTokenMenuItem.innerHTML = `
        <a id="main_menu_y" role="menuitem" tabindex="-1" aria-haspopup="false" aria-expanded="false" href="javascript:void(0)" data-level="0" onclick="window.parent.loadToken()" title="Load the selected token into miniPaint">
          <i class="fas fa-vector-square"></i> Token
        </a>
      `;

      // Browse Foundry Menu Item
      const loadBrowseMenuItem = iframeDocument.createElement('li');
      loadBrowseMenuItem.innerHTML = `
        <a id="main_menu_xxx" role="menuitem" tabindex="-1" aria-haspopup="false" aria-expanded="false" href="javascript:void(0)" data-level="0" onclick="window.parent.browseFoundry()" title="Open the Foundry file picker to import an image">
          <i class="fas fa-folder-open"></i> Foundry
        </a>
      `;

      // Create the Replace Tile and Replace Token menu items
      const replaceTileMenuItem = iframeDocument.createElement('li');
      replaceTileMenuItem.innerHTML = `
        <a id="main_menu_xx" role="menuitem" tabindex="-1" aria-haspopup="false" aria-expanded="false" href="javascript:void(0)" data-level="0" onclick="window.parent.replaceTile()" title="Replace the selected tile with the edited image">
          <i class="fas fa-exchange-alt"></i> Tile
        </a>
      `;
      const replaceTokenMenuItem = iframeDocument.createElement('li');
      replaceTokenMenuItem.innerHTML = `
        <a id="main_menu_yy" role="menuitem" tabindex="-1" aria-haspopup="false" aria-expanded="false" href="javascript:void(0)" data-level="0" onclick="window.parent.replaceToken()" title="Replace the selected token with the edited image">
          <i class="fas fa-exchange-alt"></i> Token
        </a>
      `;

      // Add Save Proto Button
      const saveProtoMenuItem = iframeDocument.createElement('li');
      saveProtoMenuItem.innerHTML = `
        <a id="main_menu_save_proto" role="menuitem" tabindex="-1" aria-haspopup="false" aria-expanded="false" href="javascript:void(0)" data-level="0" onclick="window.parent.replaceActorTexture('prototypeToken')" title="Save the edited prototype token back to the actor">
          <i class="fas fa-save"></i> Token
        </a>
      `;
      const saveAIMGMenuItem = iframeDocument.createElement('li');
      saveAIMGMenuItem.innerHTML = `
        <a id="main_menu_save_actor_image" role="menuitem" tabindex="-1" aria-haspopup="false" aria-expanded="false" href="javascript:void(0)" data-level="0" onclick="window.parent.replaceActorTexture('img')" title="Save the edited actor image back to the actor">
          <i class="fas fa-save"></i> Portrait
        </a>
      `;
      const sendTochat = iframeDocument.createElement('li');
      sendTochat.innerHTML = `
        <a id="main_menu_zz" role="menuitem" tabindex="-1" aria-haspopup="false" aria-expanded="false" href="javascript:void(0)" data-level="0" onclick="window.parent.showCanvasInImagePopout()" title="Show to players!">
          <i class="fas fa-eye"></i> Pop!
        </a>
      `;

      // Insert the new menu items at the beginning of the menu bar
      menuBar.insertBefore(sendTochat, menuBar.firstChild);
      menuBar.insertBefore(saveAIMGMenuItem, menuBar.firstChild);
      menuBar.insertBefore(saveProtoMenuItem, menuBar.firstChild);
      menuBar.insertBefore(replaceTokenMenuItem, menuBar.firstChild);
      menuBar.insertBefore(replaceTileMenuItem, menuBar.firstChild);
      menuBar.insertBefore(loadBrowseMenuItem, menuBar.firstChild);
      menuBar.insertBefore(loadTokenMenuItem, menuBar.firstChild);
      menuBar.insertBefore(loadTileMenuItem, menuBar.firstChild);
    }
  }
}

// Attach an event listener to the iframe to run the function once it's loaded
document.getElementById('myFrame').addEventListener('load', injectMenuItems);

function createStyledButton(iframeDocument, text, clickHandler) {
  const buttonDiv = iframeDocument.createElement('div');
  buttonDiv.style.width = '65px';
  buttonDiv.style.height = '25px';
  buttonDiv.style.backgroundColor = 'transparent';
  buttonDiv.style.position = 'relative';
  buttonDiv.style.display = 'flex';
  buttonDiv.style.justifyContent = 'center';
  buttonDiv.style.alignItems = 'center';
  buttonDiv.style.marginTop = '5px';
  buttonDiv.style.marginLeft = '5px';
  buttonDiv.style.cursor = 'pointer';
  buttonDiv.style.border = '1px solid #ccc';

  const buttonText = iframeDocument.createElement('span');
  buttonText.textContent = text;
  buttonText.style.color = '#FFFFFF';
  buttonText.style.fontSize = '12px';
  buttonText.style.fontWeight = 'bold';
  buttonText.style.cursor = 'pointer';
  buttonText.style.pointerEvents = 'none';

  buttonDiv.appendChild(buttonText);
  buttonDiv.onclick = clickHandler;

  return buttonDiv;
}
function replaceElementInIframe() {
  const iframe = document.getElementById('myFrame');

  if (iframe && iframe.contentWindow) {
    const iframeDocument = iframe.contentWindow.document;

    const animationElement = iframeDocument.querySelector('#animation');

    if (animationElement) {
      // Create label divs
      const bgLabel = iframeDocument.createElement('div');
      bgLabel.style.width = '65px';
      bgLabel.style.height = '11px';
      bgLabel.style.backgroundColor = 'transparent';
      bgLabel.style.position = 'relative';
      bgLabel.style.display = 'flex';
      bgLabel.style.justifyContent = 'center';
      bgLabel.style.alignItems = 'center';
      bgLabel.style.marginTop = '5px';
      bgLabel.style.marginLeft = '5px';

      bgLabel.textContent = 'BgRemove';

      const sketchLabel = iframeDocument.createElement('div');
      sketchLabel.style.width = '65px';
      sketchLabel.style.height = '11px';
      sketchLabel.style.backgroundColor = 'transparent';
      sketchLabel.style.position = 'relative';
      sketchLabel.style.display = 'flex';
      sketchLabel.style.justifyContent = 'center';
      sketchLabel.style.alignItems = 'center';
      sketchLabel.style.marginTop = '5px';
      sketchLabel.style.marginLeft = '5px';

      sketchLabel.textContent = 'StabilityAI';

      // Create the "BG" button using the reusable function
      const bgButton = createStyledButton(iframeDocument, 'BG', () => {
        window.parent.removeBackgroundAndAddLayer();
      });

      // Create the "Sketch" button using the reusable function
      const sketchButton = createStyledButton(iframeDocument, 'Sketch', () => {
        window.parent.applySketchEffect();
      });

      // Insert the labels and buttons into the DOM
      animationElement.parentNode.replaceChild(bgLabel, animationElement);
      bgLabel.parentNode.insertBefore(bgButton, bgLabel.nextSibling);
      bgButton.parentNode.insertBefore(sketchLabel, bgButton.nextSibling);
      sketchLabel.parentNode.insertBefore(sketchButton, sketchLabel.nextSibling);
    }
  }
}

// Attach an event listener to the iframe to run the function once it's loaded
document.getElementById('myFrame').addEventListener('load', replaceElementInIframe);


</script>
